@model SanalogMarket.Models.Theme.ProductTheme

@{
    ViewBag.Title = "Edit Product ";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()


    <br />
    <h1 class="label label-success" role="alert" style="padding: 10px">@ViewBag.Succes</h1>
    <div class="form-horizontal">
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Icon, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Icon)
                @Html.ValidationMessageFor(model => model.Icon)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Screenshot, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Screenshot)
                @Html.ValidationMessageFor(model => model.Screenshot)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Filepath, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Filepath)
                @Html.ValidationMessageFor(model => model.Filepath)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description)
                @Html.ValidationMessageFor(model => model.Description)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price)
                @Html.ValidationMessageFor(model => model.Price)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreateDate, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CreateDate)
                @Html.ValidationMessageFor(model => model.CreateDate)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Category, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Category)
                @Html.ValidationMessageFor(model => model.Category)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SubCategory, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SubCategory)
                @Html.ValidationMessageFor(model => model.SubCategory)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsValid, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @if (Convert.ToInt32(ViewData["CheckState"]) == 1)
                {
                  <label for="Isvalid">
                        Accept<br />
                         <input type="radio" name="IsValid" id="Isvalid" value="Accept" checked=""/>
                    </label>
                    <label for="IsValid">
                        Reject<br />
                        <input type="radio" name="IsValid" id="IsValid" value="Reject" />
                    </label>
                    
                    <label for="Isvalid">
                        Onay Aşamasına Gönder <br />
                        <input type="radio" name="IsValid" id="Isvalid" value="Approve" checked="" />
                    </label>
                }
                else if (Convert.ToInt32(ViewData["CheckState"]) == 0)
                {
@*                    @Html.CheckBox("IsValid", false)*@
                    
                     <label for="Isvalid">
                        Onay Bekliyor 
                        <input type="radio" name="IsValid" id="Isvalid" value="Approve" checked="" />
                    </label>
                    <br/>
                    <label for="Isvalid">
                        Accept 
                        <input type="radio" name="IsValid" id="Isvalid" value="Accept" />
                    </label><br/>
                    <label for="IsValid">
                        Reject 
                        <input type="radio" name="IsValid" id="IsValid" value="Reject"/>
                    </label>
                }
                @*                @Html.EditorFor(model => model.IsValid)*@
                @*                @Html.ValidationMessageFor(model => model.IsValid)*@
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "ProductWaiting")
</div>